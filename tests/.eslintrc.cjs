const path = require('path')

module.exports = {
  root: true,
  parserOptions: {
    ecmaVersion: 2020,
  },
  processor: 'disable/disable',
  globals: {},
  env: {
    browser: true,
    node: true,
    es2020: true,
  },
  extends: ['eslint:recommended', 'airbnb-base', 'xo', 'plugin:import/errors'],
  settings: {
    'html/html-extensions': ['.html', '.eta', '.njk', 'marko'],
  },
  plugins: ['@typescript-eslint', 'extra-rules', 'no-secrets', 'disable', 'html', 'mocha'],
  overrides: [
    {
      parser: '@typescript-eslint/parser',
      env: {
        commonjs: true,
        browser: true,
        node: true,
        es2020: true,
        mocha: true,
      },
      extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        'plugin:import/errors',
        'plugin:import/typescript',
        'plugin:mocha/recommended',
      ],
      files: ['*.ts'],
      parserOptions: {
        project: ['tests/.testing.tsconfig.json'],
        sourceType: 'script',
        ecmaFeatures: {
          globalReturn: true,
          impliedStrict: true,
          modules: true,
        },
      },
      rules: {
        '@typescript-eslint/no-floating-promises': 'off',
        '@typescript-eslint/unbound-method': 'off',
        '@typescript-eslint/no-unnecessary-type-assertion': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/prefer-readonly-parameter-types': 'off',
        '@typescript-eslint/semi': [
          'error',
          'never',
          {
            beforeStatementContinuationChars: 'always',
          },
        ],
        'import/extensions': 'off',
        'import/newline-after-import': 'off',
        'import/prefer-default-export': 'off',
        'import/no-unresolved': 'off',
        'eslint-comments/disable-enable-pair': 'off',
        'ramda/no-redundant-and': 'off',
        'ramda/prefer-ramda-boolean': 'off',
        'mocha/no-hooks-for-single-case': 'off',
        'security/detect-non-literal-fs-filename': 'off',
        'security/detect-object-injection': 'off',
        camelcase: 'off',
        'consistent-return': 'off',
        'comma-dangle': 'off',
        'dot-notation': 'off',
        'no-underscore-dangle': 'off',
        'eol-last': 'off',
        'function-paren-newline': 'off',
        'generator-star-spacing': 'off',
        'global-require': 'off',
        'implicit-arrow-linebreak': 'off',
        indent: 'off',
        'max-len': 'off',
        'new-cap': 'off',
        'newline-per-chained-call': 'off',
        'no-console': 'off',
        'no-confusing-arrow': 'off',
        'no-duplicate-imports': 'off',
        'no-extra-semi': 'off',
        'no-magic-numbers': 'off',
        'no-nested-ternary': 'off',
        'no-negated-condition': 'off',
        'no-shadow': 'off',
        'no-unused-vars': 'off',
        'no-use-before-define': 'off',
        'no-useless-constructor': 'off',
        'no-unused-expressions': 'off',
        'object-curly-spacing': 'off',
        'object-curly-newline': 'off',
        'operator-linebreak': 'off',
        'prefer-arrow-callback': 'off',
        'require-await': 'off',
        semi: 'off',
        'spaced-comment': 'off',
        'space-infix-ops': 'off',
      },
    },
  ],
  rules: {
    'array-callback-return': 'error',
    camelcase: 'off',
    'capitalized-comments': ['off'],
    complexity: ['error', 4],
    'consistent-return': 'error',
    'comma-dangle': 'off',
    'dot-notation': 'off',
    'eol-last': 'off',
    eqeqeq: 'error',
    'function-paren-newline': 'off',
    'generator-star-spacing': 'off',
    'guard-for-in': 'error',
    'global-require': 'off',
    'implicit-arrow-linebreak': 'off',
    indent: 'off',
    'max-depth': ['error', 3],
    'max-lines-per-function': ['error', { max: 24, skipComments: true }],
    'max-len': 'off',
    'max-params': ['error', 4],
    'max-statements-per-line': ['error', { max: 1 }],
    'new-cap': 'off',
    'newline-per-chained-call': 'off',
    'no-await-in-loop': 'error',
    'no-console': 'off',
    'no-confusing-arrow': 'off',
    'no-duplicate-imports': 'off',
    'no-debugger': 'warn',
    'no-else-return': 'error',
    'no-eq-null': 'error',
    'no-magic-numbers': 'off',
    'no-nested-ternary': 'off',
    'no-param-reassign': [
      'error',
      {
        props: true,
        ignorePropertyModificationsFor: ['store', 'res'],
      },
    ],
    'no-plusplus': 'error',
    'no-return-await': 'error',
    'no-return-assign': ['error', 'except-parens'],
    'no-shadow': 'off',
    'no-undef-init': 'error',
    'no-unneeded-ternary': ['error', { defaultAssignment: true }],
    'no-unused-vars': 'off',
    'no-use-before-define': 'off',
    'no-useless-constructor': 'off',
    'no-unused-expressions': 'off',
    'no-useless-return': 'error',
    'object-curly-spacing': 'off',
    'object-curly-newline': 'off',
    'operator-assignment': ['error', 'never'],
    'operator-linebreak': 'off',
    quotes: [
      'error',
      'single',
      {
        avoidEscape: true,
        allowTemplateLiterals: true,
      },
    ],
    radix: 'error',
    'require-atomic-updates': 'error',
    'require-unicode-regexp': 'error',
    'require-await': 'off',
    semi: 'off',
    'spaced-comment': 'off',
    'space-infix-ops': 'off',
  },
}
